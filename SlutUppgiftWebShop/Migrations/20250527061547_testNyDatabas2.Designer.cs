// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SlutUppgiftWebShop.Models;

#nullable disable

namespace SlutUppgiftWebShop.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20250527061547_testNyDatabas2")]
    partial class testNyDatabas2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SlutUppgiftWebShop.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("SlutUppgiftWebShop.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("SlutUppgiftWebShop.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryDescription = "You can find all our computers here.",
                            CategoryName = "Computers"
                        },
                        new
                        {
                            Id = 2,
                            CategoryDescription = "You can find all our components for every kind of computer",
                            CategoryName = "Computer components"
                        },
                        new
                        {
                            Id = 3,
                            CategoryDescription = "You can find all the newest phones here",
                            CategoryName = "Phones"
                        },
                        new
                        {
                            Id = 4,
                            CategoryDescription = "You can find the best monitors here",
                            CategoryName = "Monitors"
                        });
                });

            modelBuilder.Entity("SlutUppgiftWebShop.Models.DeliveryOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EstimatedDeliveryTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("DeliveryOptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EstimatedDeliveryTime = "4-7 days",
                            Name = "PostNord",
                            Price = 49m
                        },
                        new
                        {
                            Id = 2,
                            EstimatedDeliveryTime = "1-2 days",
                            Name = "Hemleverans",
                            Price = 99m
                        },
                        new
                        {
                            Id = 3,
                            EstimatedDeliveryTime = "2-4 days",
                            Name = "Hämtas i butik",
                            Price = 0m
                        });
                });

            modelBuilder.Entity("SlutUppgiftWebShop.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryOptionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentOptionId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DeliveryOptionId");

                    b.HasIndex("PaymentOptionId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("SlutUppgiftWebShop.Models.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("SlutUppgiftWebShop.Models.PaymentOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentOptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Swish"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Faktura"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Kreditkort"
                        });
                });

            modelBuilder.Entity("SlutUppgiftWebShop.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCustomer")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("People");

                    b.HasDiscriminator().HasValue("Person");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SlutUppgiftWebShop.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SupplyerId")
                        .HasColumnType("int");

                    b.Property<int>("UnitsInStock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SupplyerId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("SlutUppgiftWebShop.Models.Supplyer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Supplyers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Mitt i vattnet",
                            ContactPerson = "Lars-Olof Svan",
                            Email = "Svanensbanan@gmail.com",
                            Name = "AMD",
                            PhoneNumber = "0712345678"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Mitt i medelhavet",
                            ContactPerson = "Gunnar Bärs",
                            Email = "bärs@gmail.com",
                            Name = "Intel",
                            PhoneNumber = "0787654321"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Vattnadal",
                            ContactPerson = "Gandalf Svensson",
                            Email = "gandalf@gmail.com",
                            Name = "Nvidia",
                            PhoneNumber = "0713371337"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Finns inte",
                            ContactPerson = "Ingen hemma",
                            Email = "ingenting@gmail.com",
                            Name = "Nothing",
                            PhoneNumber = "0732178965"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Någonstans på gatan",
                            ContactPerson = "Telefon Samson",
                            Email = "samson@gmail.com",
                            Name = "Samsung",
                            PhoneNumber = "0712378945"
                        },
                        new
                        {
                            Id = 6,
                            Address = "Äppelträdet",
                            ContactPerson = "Royal Gala",
                            Email = "äpple@gmail.com",
                            Name = "Apple",
                            PhoneNumber = "0712398745"
                        },
                        new
                        {
                            Id = 7,
                            Address = "Grottan",
                            ContactPerson = "Lasse Berghagen",
                            Email = "LongGone@gmail.com",
                            Name = "LG",
                            PhoneNumber = "0712398754"
                        },
                        new
                        {
                            Id = 8,
                            Address = "Grönsakslandet",
                            ContactPerson = "Philip Grönsak",
                            Email = "Grönsaken@gmail.com",
                            Name = "Philips",
                            PhoneNumber = "0712398756"
                        });
                });

            modelBuilder.Entity("SlutUppgiftWebShop.Models.Customer", b =>
                {
                    b.HasBaseType("SlutUppgiftWebShop.Models.Person");

                    b.HasDiscriminator().HasValue("Customer");
                });

            modelBuilder.Entity("SlutUppgiftWebShop.Models.Employee", b =>
                {
                    b.HasBaseType("SlutUppgiftWebShop.Models.Person");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Employee");
                });

            modelBuilder.Entity("SlutUppgiftWebShop.Models.Cart", b =>
                {
                    b.HasOne("SlutUppgiftWebShop.Models.Customer", "Customer")
                        .WithMany("Carts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Carts_People_CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SlutUppgiftWebShop.Models.CartItem", b =>
                {
                    b.HasOne("SlutUppgiftWebShop.Models.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SlutUppgiftWebShop.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SlutUppgiftWebShop.Models.Order", b =>
                {
                    b.HasOne("SlutUppgiftWebShop.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SlutUppgiftWebShop.Models.DeliveryOption", "DeliveryOption")
                        .WithMany()
                        .HasForeignKey("DeliveryOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SlutUppgiftWebShop.Models.PaymentOption", "PaymentOption")
                        .WithMany()
                        .HasForeignKey("PaymentOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("DeliveryOption");

                    b.Navigation("PaymentOption");
                });

            modelBuilder.Entity("SlutUppgiftWebShop.Models.OrderDetail", b =>
                {
                    b.HasOne("SlutUppgiftWebShop.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SlutUppgiftWebShop.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SlutUppgiftWebShop.Models.Product", b =>
                {
                    b.HasOne("SlutUppgiftWebShop.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SlutUppgiftWebShop.Models.Supplyer", "Supplyer")
                        .WithMany("Products")
                        .HasForeignKey("SupplyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Supplyer");
                });

            modelBuilder.Entity("SlutUppgiftWebShop.Models.Cart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("SlutUppgiftWebShop.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SlutUppgiftWebShop.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("SlutUppgiftWebShop.Models.Product", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("SlutUppgiftWebShop.Models.Supplyer", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SlutUppgiftWebShop.Models.Customer", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
